swagger: "2.0"
info:
  version: "0.0.1"
  title: Hello World App
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json

<% if (auth) {%>
securityDefinitions:
  jwt:
    type: apiKey
    name: "Authorization"
    in: header
<%}%>

paths:
  /person/{id}:
    x-swagger-router-controller: person
    get:
      description: Gets a specific person
      operationId: showPerson
      parameters:
        - name: id
          in: path
          description: id of user
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/PersonResponse"

        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    put:
      description: upsert a person
      operationId: upsertPerson
      parameters:
        - name: id
          in: path
          description: id of user
          required: true
          type: string
        - in: body
          name: body
          description: Person object data to update
          required: true
          schema:
            $ref: '#/definitions/Person'
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/PersonResponse"

        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    patch:
      description: partial update of a person
      operationId: patchPerson
      parameters:
        - name: id
          in: path
          description: id of user
          required: true
          type: string
        - name: JsonPatch
          in: body
          required: true
          schema:
            $ref: "#/definitions/PatchRequest"

      responses:
        "204":
          description: Success
          schema:
            $ref: "#/definitions/PersonResponse"

        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      description: delete a specific user
      operationId: destroyPerson
      parameters:
        - name: id
          in: path
          description: id of user
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        default:
            description: Error
            schema:
              $ref: "#/definitions/ErrorResponse"
  /person:
    x-swagger-router-controller: person
    get:
      description: Returns a list of all persons
      operationId: indexPerson
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/PersonListResponse"

    post:
      description: Creates a person
      operationId: createPerson
      parameters:
        - in: body
          name: body
          description: Person object added to the databse
          required: true
          schema:
            $ref: '#/definitions/Person'

      responses:
        "201":
          description: Success
          schema:
            $ref: "#/definitions/PersonResponse"

        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

<% if (auth) {%>
  /user/me:
    x-swagger-router-controller: user
    put:
      description: change username or password
      operationId: upsertUserMe
      security:
        - jwt: []
      x-security-scope:
        - user
        - admin
      parameters:
        - in: body
          name: body
          description: email and password
          schema:
            $ref: "#/definitions/UserEmailPassword"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: error
          schema:
            $ref: "#/definitions/ErrorResponse"

    get:
      description: Get information about request user
      operationId: showUserMe
      security:
        - jwt: []
      x-security-scope:
        - user
        - admin
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /user/{id}:
    x-swagger-router-controller: user
    get:
      description: Returns a specific user
      operationId: showUser
      security:
        - jwt: []
      x-security-scope:
        - user
        - admin
      parameters:
        - name: id
          in: path
          description: id of user
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: error
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      description: deletes a user
      operationId: destroyUser
      security:
        - jwt: []
      x-security-scope:
        - admin
      parameters:
        - name: id
          in: path
          description: id of the user to delete
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        "403":
          description: Forbidden
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /user:
    x-swagger-router-controller: user
    get:
      description: Returns a list of all users
      operationId: indexUser
      security:
        - jwt: []
      x-security-scope:
        - admin
        - user
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserListResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: error
          schema:
            $ref: "#/definitions/ErrorResponse"

    post:
      description: Creates a User
      operationId: createUser
      parameters:
        - in: body
          name: body
          description: user informaton create user
          schema:
            $ref: "#/definitions/User"
      responses:
        "201":
          description: Success
          schema:
            $ref: "#/definitions/AuthTokenResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /auth/login:
    x-swagger-router-controller: auth
    post:
      description: login api for obtaining jwt
      operationId: login
      parameters:
        - in: body
          name: body
          description: user name and password
          required: true
          schema:
            $ref: "#/definitions/AuthLogin"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/AuthTokenResponse"
        "401":
          description: Unauthorized
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: error
          schema:
            $ref: "#/definitions/ErrorResponse"
  <%}%>

  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  PersonListResponse:
    type: array
    items:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        age:
          type: integer

  PersonResponse:
    required:
      - _id
    properties:
      _id:
        type: string
      name:
        type: string
      description:
        type: string
      age:
        type: integer
<% if (auth) {%>
  UserListResponse:
    type: array
    items:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string

  UserResponse:
    required:
      - _id
    properties:
      _id:
        type: string
      name:
        type: string
      email:
        type: string
      role:
        type: string
<%}%>
  PatchRequest:
    type: array
    items:
      $ref: "#/definitions/PatchDocument"

  PatchDocument:
    description: A JSONPatch document as defined by RFC 6902
    required:
     - "op"
     - "path"
    properties:
     op:
      type: string
      description: The operation to be performed
      enum:
       - "add"
       - "remove"
       - "replace"
       - "move"
       - "copy"
       - "test"
     path:
      type: string
      description: A JSON-Pointer
     value:
      type: object
      description: The value to be used within the operations.
     from:
      type: string
      description: A string containing a JSON Pointer value.

# Post definitions
  Person:
    title: A person
    type: object
    required:
      - name
      - description
      - age
    properties:
      name:
        type: string
      description:
        type: string
      age:
        type: integer

<% if (auth) {%>
  User:
    title: A user
    type: object
    required:
      - email
      - password
      - name
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string

  UserEmailPassword:
    title: email and password
    type: object
    properties:
      email:
        type: string
      password:
        type: string

  AuthLogin:
    title: login
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
         type: string

  AuthTokenResponse:
    description: jwt token
    required:
      - token
    properties:
      token:
        type: string
<%}%>
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string

  SuccessResponse:
    required:
      - message
    properties:
      message:
        type: string
